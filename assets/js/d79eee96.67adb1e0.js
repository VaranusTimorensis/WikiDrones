"use strict";(self.webpackChunkwikidrones=self.webpackChunkwikidrones||[]).push([[7697],{8453:(e,o,n)=>{n.d(o,{R:()=>l,x:()=>a});var s=n(6540);const t={},i=s.createContext(t);function l(e){const o=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:o},e.children)}},8858:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>r,contentTitle:()=>a,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"commandes_de_vol/Script de r\xe9f\xe9rence","title":"Script de r\xe9f\xe9rence","description":"Voici pour illustrer les principales commandes de vol un exemple de code Python tir\xe9 de px4roscom (https://github.com/PX4/px4roscom/blob/main/src/examples/offboardpy/offboardcontrol.py).","source":"@site/docs/commandes_de_vol/Script de r\xe9f\xe9rence.md","sourceDirName":"commandes_de_vol","slug":"/commandes_de_vol/Script de r\xe9f\xe9rence","permalink":"/WikiDrones/docs/commandes_de_vol/Script de r\xe9f\xe9rence","draft":false,"unlisted":false,"editUrl":"https://github.com/VaranusTimorensis/WikiDrones/docs/commandes_de_vol/Script de r\xe9f\xe9rence.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Commandes de vol","permalink":"/WikiDrones/docs/category/commandes-de-vol"},"next":{"title":"Message VehicleCommand","permalink":"/WikiDrones/docs/commandes_de_vol/Message VehicleCommand"}}');var t=n(4848),i=n(8453);const l={sidebar_position:1},a=void 0,r={},c=[];function m(e){const o={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.p,{children:["Voici pour illustrer les principales commandes de vol un exemple de code Python tir\xe9 de px4_ros_com (",(0,t.jsx)(o.a,{href:"https://github.com/PX4/px4_ros_com/blob/main/src/examples/offboard_py/offboard_control.py",children:"https://github.com/PX4/px4_ros_com/blob/main/src/examples/offboard_py/offboard_control.py"}),")."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-python",children:'#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom rclpy.qos import QoSProfile, ReliabilityPolicy, HistoryPolicy, DurabilityPolicy\nfrom px4_msgs.msg import OffboardControlMode, TrajectorySetpoint, VehicleCommand, VehicleLocalPosition, VehicleStatus\n\n\nclass OffboardControl(Node):\n    """Node for controlling a vehicle in offboard mode."""\n\n    def __init__(self) -> None:\n        super().__init__(\'offboard_control_takeoff_and_land\')\n\n        # Configure QoS profile for publishing and subscribing\n        qos_profile = QoSProfile(\n            reliability=ReliabilityPolicy.BEST_EFFORT,\n            durability=DurabilityPolicy.TRANSIENT_LOCAL,\n            history=HistoryPolicy.KEEP_LAST,\n            depth=1\n        )\n\n        # Create publishers\n        self.offboard_control_mode_publisher = self.create_publisher(\n            OffboardControlMode, \'/fmu/in/offboard_control_mode\', qos_profile)\n        self.trajectory_setpoint_publisher = self.create_publisher(\n            TrajectorySetpoint, \'/fmu/in/trajectory_setpoint\', qos_profile)\n        self.vehicle_command_publisher = self.create_publisher(\n            VehicleCommand, \'/fmu/in/vehicle_command\', qos_profile)\n\n        # Create subscribers\n        self.vehicle_local_position_subscriber = self.create_subscription(\n            VehicleLocalPosition, \'/fmu/out/vehicle_local_position\', self.vehicle_local_position_callback, qos_profile)\n        self.vehicle_status_subscriber = self.create_subscription(\n            VehicleStatus, \'/fmu/out/vehicle_status\', self.vehicle_status_callback, qos_profile)\n\n        # Initialize variables\n        self.offboard_setpoint_counter = 0\n        self.vehicle_local_position = VehicleLocalPosition()\n        self.vehicle_status = VehicleStatus()\n        self.takeoff_height = -5.0\n\n        # Create a timer to publish control commands\n        self.timer = self.create_timer(0.1, self.timer_callback)\n\n    def vehicle_local_position_callback(self, vehicle_local_position):\n        """Callback function for vehicle_local_position topic subscriber."""\n        self.vehicle_local_position = vehicle_local_position\n\n    def vehicle_status_callback(self, vehicle_status):\n        """Callback function for vehicle_status topic subscriber."""\n        self.vehicle_status = vehicle_status\n\n    def arm(self):\n        """Send an arm command to the vehicle."""\n        self.publish_vehicle_command(\n            VehicleCommand.VEHICLE_CMD_COMPONENT_ARM_DISARM, param1=1.0)\n        self.get_logger().info(\'Arm command sent\')\n\n    def disarm(self):\n        """Send a disarm command to the vehicle."""\n        self.publish_vehicle_command(\n            VehicleCommand.VEHICLE_CMD_COMPONENT_ARM_DISARM, param1=0.0)\n        self.get_logger().info(\'Disarm command sent\')\n\n    def engage_offboard_mode(self):\n        """Switch to offboard mode."""\n        self.publish_vehicle_command(\n            VehicleCommand.VEHICLE_CMD_DO_SET_MODE, param1=1.0, param2=6.0)\n        self.get_logger().info("Switching to offboard mode")\n\n    def land(self):\n        """Switch to land mode."""\n        self.publish_vehicle_command(VehicleCommand.VEHICLE_CMD_NAV_LAND)\n        self.get_logger().info("Switching to land mode")\n\n    def publish_offboard_control_heartbeat_signal(self):\n        """Publish the offboard control mode."""\n        msg = OffboardControlMode()\n        msg.position = True\n        msg.velocity = False\n        msg.acceleration = False\n        msg.attitude = False\n        msg.body_rate = False\n        msg.timestamp = int(self.get_clock().now().nanoseconds / 1000)\n        self.offboard_control_mode_publisher.publish(msg)\n\n    def publish_position_setpoint(self, x: float, y: float, z: float):\n        """Publish the trajectory setpoint."""\n        msg = TrajectorySetpoint()\n        msg.position = [x, y, z]\n        msg.yaw = 1.57079  # (90 degree)\n        msg.timestamp = int(self.get_clock().now().nanoseconds / 1000)\n        self.trajectory_setpoint_publisher.publish(msg)\n        self.get_logger().info(f"Publishing position setpoints {[x, y, z]}")\n\n    def publish_vehicle_command(self, command, **params) -> None:\n        """Publish a vehicle command."""\n        msg = VehicleCommand()\n        msg.command = command\n        msg.param1 = params.get("param1", 0.0)\n        msg.param2 = params.get("param2", 0.0)\n        msg.param3 = params.get("param3", 0.0)\n        msg.param4 = params.get("param4", 0.0)\n        msg.param5 = params.get("param5", 0.0)\n        msg.param6 = params.get("param6", 0.0)\n        msg.param7 = params.get("param7", 0.0)\n        msg.target_system = 1\n        msg.target_component = 1\n        msg.source_system = 1\n        msg.source_component = 1\n        msg.from_external = True\n        msg.timestamp = int(self.get_clock().now().nanoseconds / 1000)\n        self.vehicle_command_publisher.publish(msg)\n\n    def timer_callback(self) -> None:\n        """Callback function for the timer."""\n        self.publish_offboard_control_heartbeat_signal()\n\n        if self.offboard_setpoint_counter == 10:\n            self.engage_offboard_mode()\n            self.arm()\n\n        if self.vehicle_local_position.z > self.takeoff_height and self.vehicle_status.nav_state == VehicleStatus.NAVIGATION_STATE_OFFBOARD:\n            self.publish_position_setpoint(0.0, 0.0, self.takeoff_height)\n\n        elif self.vehicle_local_position.z <= self.takeoff_height:\n            self.land()\n            exit(0)\n\n        if self.offboard_setpoint_counter < 11:\n            self.offboard_setpoint_counter += 1\n\n\ndef main(args=None) -> None:\n    print(\'Starting offboard control node...\')\n    rclpy.init(args=args)\n    offboard_control = OffboardControl()\n    rclpy.spin(offboard_control)\n    offboard_control.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == \'__main__\':\n    try:\n        main()\n    except Exception as e:\n        print(e)\n'})})]})}function f(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);