"use strict";(self.webpackChunkwikidrones=self.webpackChunkwikidrones||[]).push([[2299],{6816:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"commandes_de_vol/Message VehicleCommand","title":"Message VehicleCommand","description":"Message UORB VehicleCommand","source":"@site/docs/commandes_de_vol/Message VehicleCommand.md","sourceDirName":"commandes_de_vol","slug":"/commandes_de_vol/Message VehicleCommand","permalink":"/WikiDrones/docs/commandes_de_vol/Message VehicleCommand","draft":false,"unlisted":false,"editUrl":"https://github.com/VaranusTimorensis/WikiDrones/docs/commandes_de_vol/Message VehicleCommand.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Script de r\xe9f\xe9rence","permalink":"/WikiDrones/docs/commandes_de_vol/Script de r\xe9f\xe9rence"},"next":{"title":"Le mode Offboard","permalink":"/WikiDrones/docs/commandes_de_vol/Le mode Offboard"}}');var i=s(4848),r=s(8453);const a={sidebar_position:2},o=void 0,m={},d=[{value:"Message UORB VehicleCommand",id:"message-uorb-vehiclecommand",level:3}];function c(e){const n={code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"message-uorb-vehiclecommand",children:"Message UORB VehicleCommand"}),"\n",(0,i.jsx)(n.p,{children:"Code associ\xe9 :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def publish_vehicle_command(self, command, **params) -> None:\n    """Publish a vehicle command."""\n    msg = VehicleCommand()\n    msg.command = command\n    msg.param1 = params.get("param1", 0.0)\n    msg.param2 = params.get("param2", 0.0)\n    msg.param3 = params.get("param3", 0.0)\n    msg.param4 = params.get("param4", 0.0)\n    msg.param5 = params.get("param5", 0.0)\n    msg.param6 = params.get("param6", 0.0)\n    msg.param7 = params.get("param7", 0.0)\n    msg.target_system = 1\n    msg.target_component = 1\n    msg.source_system = 1\n    msg.source_component = 1\n    msg.from_external = True\n    msg.timestamp = int(self.get_clock().now().nanoseconds / 1000)\n    self.vehicle_command_publisher.publish(msg)\n'})}),"\n",(0,i.jsx)(n.p,{children:"VehicleCommand est un message UORB, qui est un middleware interne \xe0 PX4. UORB est utilis\xe9 pour envoyer des commandes \xe0 l'int\xe9rieur du syst\xe8me PX4 (navigation, armement, changement de mode, etc.)."}),"\n",(0,i.jsx)(n.p,{children:"Voici sa structure g\xe9n\xe9rique :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"uint64 timestamp # [us] Time since system start.\nfloat32 param1 # Parameter 1, as defined by MAVLink uint16 VEHICLE_CMD enum.\nfloat32 param2 # Parameter 2, as defined by MAVLink uint16 VEHICLE_CMD enum.\nfloat32 param3 # Parameter 3, as defined by MAVLink uint16 VEHICLE_CMD enum.\nfloat32 param4 # Parameter 4, as defined by MAVLink uint16 VEHICLE_CMD enum.\nfloat64 param5 # Parameter 5, as defined by MAVLink uint16 VEHICLE_CMD enum.\nfloat64 param6 # Parameter 6, as defined by MAVLink uint16 VEHICLE_CMD enum.\nfloat32 param7 # Parameter 7, as defined by MAVLink uint16 VEHICLE_CMD enum.\nuint32 command # Command ID.\nuint8 target_system # System which should execute the command.\nuint8 target_component # Component which should execute the command, 0 for all components.\nuint8 source_system # System sending the command.\nuint16 source_component # Component / mode executor sending the command.\nuint8 confirmation # 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command).\nbool from_external\n"})}),"\n",(0,i.jsx)(n.p,{children:"D\xe9taillons plus pr\xe9cis\xe9ment les param\xe8tres \xe0 renseigner :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"timestamp"})," repr\xe9sente le temps \xe9coul\xe9 depuis le d\xe9marrage du syst\xe8me PX4 en microsecondes (et non pas un timestamp UNIX). Ce param\xe8tre est essentiel pour la coh\xe9rence temporelle du syst\xe8me. Il permet notamment \xe0 PX4 de savoir quand la commande a \xe9t\xe9 g\xe9n\xe9r\xe9e, et donc si elle est encore pertinente, et de reconstituer la chronologie des \xe9v\xe9nements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"command"})," : commande \xe0 ex\xe9cuter. Les diff\xe9rentes possibilit\xe9s sont d\xe9crites dans le fichier VehicleCommand.msg situ\xe9 dans le dossier ",(0,i.jsx)(n.code,{children:"px4_msgs/msg/"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"param1"})," \xe0 ",(0,i.jsx)(n.code,{children:"param7"})," : Chaque commande peut exiger de 1 \xe0 7 param\xe8tres. Les param\xe8tres \xe0 renseigner sont pr\xe9cis\xe9s dans VehicleCommand.msg."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"from_external"})," : PX4 distingue les commandes internes et des commandes externes pour des raisons de :","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"S\xe9curit\xe9 (certaines commandes critiques ne doivent pas \xeatre accept\xe9es \xe0 distance sans autorisation explicite),"}),"\n",(0,i.jsx)(n.li,{children:"Priorit\xe9 (les modules internes peuvent avoir priorit\xe9 sur certaines commandes externes),"}),"\n",(0,i.jsx)(n.li,{children:"Auditabilit\xe9 (savoir si une commande vient d'un op\xe9rateur externe ou d'un contr\xf4leur interne),"}),"\n",(0,i.jsx)(n.li,{children:"Filtrage (le syst\xe8me peut ignorer certaines commandes externes en fonction du mode de vol, etc.)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"target_system"})," d\xe9signe l'id unique du syst\xe8me (ex : drone entier) que l'on veut commander. Dans un r\xe9seau MAVLink (ex : drone + companion + station sol), chaque syst\xe8me a un ",(0,i.jsx)(n.code,{children:"system_id"}),". PX4 (le contr\xf4leur de vol) utilise g\xe9n\xe9ralement ",(0,i.jsx)(n.code,{children:"system_id = 1"}),". 0 permet de diffuser la commande \xe0 tous les syst\xe8mes. Certains modules ignorent cette valeur."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"target_component"})," cible le composant du syst\xe8me, i.e. le module \xe0 l'int\xe9rieur du syst\xe8me qui doit ex\xe9cuter la commande. Par exemple, 1 d\xe9signe l'autopilote (PX4, ArduPilot), 100 la cam\xe9ra."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"source_system"})," : id du syst\xe8me \xe9metteur."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"source_component"})," : id du composant \xe9metteur dans le syst\xe8me \xe9metteur."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"confirmation"})," indique si la commande est :","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["une nouvelle requ\xeate (",(0,i.jsx)(n.code,{children:"confirmation = 0"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["une r\xe9p\xe9tition de la m\xeame commande, pour s'assurer qu'elle a bien \xe9t\xe9 re\xe7ue (",(0,i.jsx)(n.code,{children:"confirmation > 0"}),"). Avec VehicleCommand, la valeur par d\xe9faut est 0."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Remarque"})," : ",(0,i.jsx)(n.code,{children:"source_system = source_component = target_system = target_component = 1"})," signifie que la commande vient de l'autopilote et s'adresse \xe0 l'autopilote. C'est logiquement incompatible \xe0 ",(0,i.jsx)(n.code,{children:"from_external = true"})," et ne devrait pas \xeatre utilis\xe9 si la commande provient du companion (ex : Jetson)."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);